module FileSystem exposing
    ( Permission
    , initialize
    --
    , UnknownFileSystemError(..)
    , AccessError(..)
    --
    , remove
    --
    , makeDirectory
    , DirEntry(..)
    , listDirectory
    , currentWorkingDirectory
    )


{-| This module provides access to the file system. It allows you to read and write files or directories.

## Initialization

@docs Permission, initialize

## Errors

@docs AccessError, UnknownFileSystemError

## File open/close

@docs FileHandle, ReadableFileHandle, WriteableFileHandle, ReadWriteableFileHandle, ReadPermission, WritePermission, makeReadOnly, makeWriteOnly, openForRead, OpenForWriteBehaviour, openForWrite, openForReadAndWrite, close

## Read from file

@docs read, readFromOffset

## Write to file

@docs write, writeFromOffset

## Remove files and directories

@docs remove

## Directories

@docs makeDirectory, DirEntry, listDirectory, currentWorkingDirectory

-}


import Gren.Kernel.FileSystem
import Bytes exposing (Bytes)
import Task exposing (Task)
import FileSystem.Path exposing (Path)
import Init
import Internal.Init


{-| This value represents the permission to perform file system operations.

Only code you trust should have access to this value.
-}
type Permission
    = Permission


{-| Initialize the `FileSystem` subsystem, which gains you the permission to perform
file system operations.
-}
initialize : Init.Task Permission
initialize =
    Task.succeed Permission
        |> Internal.Init.Task


-- DIRECTORY


{-| Represents entries in a directory.

Variants for each type of entry, with a `String` representing the relative path.

As returned by `FileSystem.listDirectory`.
-}
type DirEntry
    = File String
    | Directory String
    | Socket String
    | Symlink String
    | Device String
    | Pipe String


-- ERRORS


{-| The set of errors that can happen when accessing a file or directory.
-}
type AccessError
    = AccessErrorNotFound
    | AccessErrorNoAccess
    | AccessErrorNotADirectory
    | AccessErrorUnknown String


{-| An error thrown by the OS, in situations where we don't expect errors to happen,
or have been unable to reproduce such an error in development.
-}
type UnknownFileSystemError
    = UnknownFileSystemError String


-- REMOVE


{-| Remove the file or directory at the given path.

* `recursive` will delete everything inside a directory.
* `ignoreErrors` will... ignore any errors related to a remove operation.
-}
remove : Permission -> { recursive : Bool, ignoreErrors : Bool } -> Path -> Task AccessError Path
remove _ options path =
    Gren.Kernel.FileSystem.remove options path


-- DIRECTORIES


{-| Create a new directory at the given path.

If `recursive` is `True`, then a directory will be created for every section of the
given path.
-}
makeDirectory : Permission -> { recursive : Bool } -> Path -> Task AccessError Path
makeDirectory _ options path =
    Gren.Kernel.FileSystem.makeDirectory options path


{-| Returns an `Array` of `DirEntry` variants holding names of the files in the
directory at the given path.
-}
listDirectory : Permission -> Path -> Task AccessError (Array DirEntry)
listDirectory _ path =
    Gren.Kernel.FileSystem.listDirectory path


{-| Returns the current working directory of the program.
This is the directory that all relative paths are relative to.
-}
currentWorkingDirectory : Permission -> Task x Path
currentWorkingDirectory _ =
    Gren.Kernel.FileSystem.currentWorkingDirectory
