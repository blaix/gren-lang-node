module FileSystem exposing
    ( Configuration
    , Connection
    --
    , FileHandle
    , ReadableFileHandle
    , WriteableFileHandle
    , ReadWriteableFileHandle
    --
    , initialize
    --
    , OpenForWriteBehaviour
    , openForRead
    , openForWrite
    , openForReadAndWrite
    --
    , close
    --
    , read
    , readFromOffset
    --
    , write
    , writeFromOffset
    )


import Gren.Kernel.FileSystem
import Bytes exposing (Bytes)
import Task exposing (Task)


type alias Configuration =
    { connection : Connection
    }


type Connection
    = Connection


initialize : Task Never Configuration
initialize =
    Task.succeed
        { connection = Connection
        }


-- FILES


-- Note: Actual implementation in kernel code
type FileHandle readAccess writeAccess
    = FileHandle


type ReadPermission = ReadPermission
type NoReadPermission = NoReadPermission

type WritePermission = WritePermission
type NoWritePermission = NoWritePermission


type alias ReadableFileHandle a = FileHandle ReadPermission a
type alias WriteableFileHandle a = FileHandle a WritePermission
type alias ReadWriteableFileHandle = FileHandle ReadPermission WritePermission


-- OPEN


openForRead : Connection -> String -> Task Never (ReadableFileHandle a)
openForRead _ path =
    openImpl "r" path


type OpenForWriteBehaviour
    = EnsureEmpty
    | ExpectExcisting
    | ExpectNotExisting


openForWrite : Connection -> OpenForWriteBehaviour -> String -> Task Never (WriteableFileHandle a)
openForWrite _ behaviour path =
    let
        access =
            case behaviour of
                EnsureEmpty -> "w"
                ExpectExcisting -> "r+"
                ExpectNotExisting -> "wx"
    in
    openImpl access path


openForReadAndWrite : Connection -> OpenForWriteBehaviour -> String -> Task Never ReadWriteableFileHandle
openForReadAndWrite _ behaviour path =
    let
        access =
            case behaviour of
                EnsureEmpty -> "w+"
                ExpectExcisting -> "r+"
                ExpectNotExisting -> "wx+"
    in
    openImpl access path


openImpl : String -> String -> Task Never (FileHandle a b)
openImpl =
    Gren.Kernel.FileSystem.open


-- CLOSE


close : FileHandle a b -> Task Never Unit
close =
    Gren.Kernel.FileSystem.close


-- READING


read : ReadableFileHandle a -> Task Never Bytes
read fh =
    readFromOffset fh { offset = 0, length = -1 }


readFromOffset : ReadableFileHandle a -> { offset : Int, length : Int } -> Task Never Bytes
readFromOffset =
    Gren.Kernel.FileSystem.readFromOffset


-- WRITING


write : WriteableFileHandle a -> Bytes -> Task Never Unit
write fh bytes =
    writeFromOffset fh 0 bytes


writeFromOffset : WriteableFileHandle a -> Int -> Bytes -> Task Never Unit
writeFromOffset =
    Gren.Kernel.FileSystem.writeFromOffset

