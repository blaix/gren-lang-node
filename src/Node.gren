module Node exposing
    ( InitResult
    , initialize
    )

import Dict exposing (Dict)
import Gren.Kernel.Node
import Task
import Internal.Stream as IStream


type alias RawInitResult =
    { args : Array String
    , env : Dict String String
    , stdout : IStream.RawStream
    , stderr : IStream.RawStream
    , stdin : IStream.RawStream
    }


type alias InitResult =
    { args : Array String
    , env : Dict String String
    , stdout : IStream.Stream
    , stderr : IStream.Stream
    , stdin : IStream.Stream
    }


init : Task.Task Never InitResult
init =
    Gren.Kernel.Node.init
        |> Task.map (\rawResult ->
            { args = rawResult.args
            , env = rawResult.env
            , stdout = IStream.Stream 0 rawResult.stdout
            , stderr = IStream.Stream 1 rawResult.stderr
            , stdin = IStream.Stream 2 rawResult.stdin
            }
        )

