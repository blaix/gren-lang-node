module Node exposing
    ( Configuration
    , Platform
    , CpuArchitecture
    --
    , initialize
    --
    , getEnvironmentVariables
    --
    , exit
    , exitWithCode
    )

import Dict exposing ( Dict )
import Gren.Kernel.Node
import Task exposing (Task)
import Internal.Stream as IStream


type alias RawConfiguration =
    { platform : String
    , arch : String
    , args : Array String
    , env : Dict String String
    , stdout : IStream.RawStream
    , stderr : IStream.RawStream
    , stdin : IStream.RawStream
    }


type alias Configuration =
    { platform : Platform
    , cpuArchitecture : CpuArchitecture
    , args : Array String
    , env : Dict String String
    , stdout : IStream.Stream
    , stderr : IStream.Stream
    , stdin : IStream.Stream
    }


initialize : Task Never Configuration
initialize =
    Gren.Kernel.Node.init
        |> Task.map
                (\raw ->
                    { platform = platformFromString raw.platform
                    , cpuArchitecture = archFromString raw.arch
                    , args = raw.args
                    , env = raw.env
                    , stdout = IStream.Stream 0 raw.stdout
                    , stderr = IStream.Stream 1 raw.stderr
                    , stdin = IStream.Stream 2 raw.stdin
                    }
                )


-- PLATFORM


type Platform
    = Win32
    | Darwin
    | Linux
    | FreeBSD
    | OpenBSD
    | SunOS
    | Aix
    | UnknownPlatform


platformFromString : String -> Platform
platformFromString platform =
    case String.toLower platform of
        "win32" ->
            Win32

        "darwin" ->
            Darwin

        "linux" ->
            Linux

        "freebsd" ->
            FreeBSD

        "openbsd" ->
            OpenBSD

        "sunos" ->
            SunOS

        "aix" ->
            Aix

        _ ->
            UnknownPlatform


-- ARCH


type CpuArchitecture
    = Arm
    | Arm64
    | IA32
    | Mips
    | Mipsel
    | PPC
    | PPC64
    | S390
    | S390x
    | X64
    | UnknownArchitecture


archFromString : String -> CpuArchitecture
archFromString arch =
    case String.toLower arch of
        "arm" ->
            Arm

        "arm64" ->
            Arm64

        "ia32" ->
            IA32

        "mips" ->
            Mips

        "mipsel" ->
            Mipsel

        "ppc" ->
            PPC

        "ppc64" ->
            PPC64

        "s390" ->
            S390

        "s390x" ->
            S390x

        "x64" ->
            X64

        _ ->
            UnknownArchitecture


-- TASKS

getEnvironmentVariables : Task Never (Dict String String)
getEnvironmentVariables =
    Gren.Kernel.Node.getEnvironmentVariables


exit : Cmd msg
exit =
    Gren.Kernel.Node.exit
        |> Task.perform never


exitWithCode : Int -> Cmd msg
exitWithCode code =
    Gren.Kernel.Node.exitWithCode code
        |> Task.perform never

