module ChildProcess exposing 
    ( Permission
    , initialize
    --
    , RunOptions
    , Shell(..)
    , WorkingDirectory(..)
    , EnvironmentVariables(..)
    , MaximumBytes(..)
    , RunDuration(..)
    , FailedRun
    , SuccessfulRun
    , run
    )


import Gren.Kernel.ChildProcess
import Bytes exposing (Bytes)
import Dict exposing (Dict)
import Task exposing (Task)
import Node.Program as Program
import Internal.AppInitTask exposing (AppInitTask(..))


type Permission
    = Permission


initialize : Program.AppInitTask Permission
initialize =
    Task.succeed Permission
        |> AppInitTask


type alias RunOptions =
    { program : String
    , arguments : Array String
    , shell : Shell
    , workingDirectory : WorkingDirectory
    , environmentVariables : EnvironmentVariables
    , maximumBytesWrittenToStreams : MaximumBytes
    , runDuration : RunDuration
    }


type Shell
    = NoShell
    | DefaultShell
    | CustomShell String


type WorkingDirectory
    = InheritWorkingDirectory
    | SetWorkingDirectory String


type EnvironmentVariables
    = InheritEnvironmentVariables
    | MergeWithEnvironmentVariables (Dict String String)
    | ReplaceEnvironmentVariables (Dict String String)


type MaximumBytes
    = DefaultMaximum
    | CustomMaximum Int


type RunDuration
    = NoLimit
    | Milliseconds Int


type alias FailedRun =
    { exitCode: Int
    , stdout : Bytes
    , stderr : Bytes
    }


type alias SuccessfulRun =
    { stdout : Bytes
    , stderr : Bytes
    }


run : Permission -> RunOptions -> Task FailedRun SuccessfulRun
run _ opts =
    Gren.Kernel.ChildProcess.run
        { program = opts.program
        , arguments = opts.arguments
        , shell =
            case opts.shell of
                NoShell ->
                    { choice = 0
                    , value = ""
                    }

                DefaultShell ->
                    { choice = 1
                    , value = ""
                    }

                CustomShell value ->
                    { choice = 2
                    , value = value
                    }
        , workingDirectory =
             case opts.workingDirectory of
                 InheritWorkingDirectory -> 
                    { inherit = True
                    , override = ""
                    }

                 SetWorkingDirectory value ->
                    { inherit = False
                    , override = value
                    }
        , environmentVariables =
            case opts.environmentVariables of
                InheritEnvironmentVariables -> 
                    { option = 0
                    , value = Dict.empty
                    }
                
                MergeWithEnvironmentVariables value ->
                    { option = 1
                    , value = value
                    }

                ReplaceEnvironmentVariables value ->
                    { option = 2
                    , value = value
                    }
        , maximumBytesWrittenToStreams =
            case opts.maximumBytesWrittenToStreams of
                DefaultMaximum ->
                    1024 * 1024

                CustomMaximum value ->
                    value
        , runDuration =
            case opts.runDuration of
                NoLimit ->
                    0

                Milliseconds ms -> 
                    max 0 ms
        }
