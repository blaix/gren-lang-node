module FileSystem.Path exposing 
    ( Path
    , empty
    , fromPosixString
    , toPosixString
    , fromWin32String
    , toWin32String
    , filenameWithExtension
    , append
    , prepend
    , concat
    )


import Gren.Kernel.FilePath


type alias Path =
    { root : String
    , directory : Array String
    , filename : String
    , extension : String
    }


empty : Path
empty =
    { root = ""
    , directory = []
    , filename = ""
    , extension = ""
    }


fromPosixString : String -> Path
fromPosixString =
    Gren.Kernel.FilePath.fromPosix


toPosixString : Path -> String
toPosixString =
    Gren.Kernel.FilePath.toPosix


fromWin32String : String -> Path
fromWin32String =
    Gren.Kernel.FilePath.fromWin32


toWin32String : Path -> String
toWin32String =
    Gren.Kernel.FilePath.toWin32


filenameWithExtension : Path -> String
filenameWithExtension path =
    if String.isEmpty path.extension then
        path.filename

    else
        path.filename ++ "." ++ path.extension


append : Path -> Path -> Path
append left right =
    prepend right left


prepend : Path -> Path -> Path
prepend left right =
    { left
        | directory =
            left.directory
                |> Array.pushLast (filenameWithExtension left)
                |> Array.append right.directory
                |> Array.filter (\dir -> dir /= "")
        , filename = right.filename
        , extension = right.extension
    }


concat : Array Path -> Path
concat paths =
    Array.foldl append (fromPosixString ".") paths
