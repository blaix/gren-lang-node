module FileSystem.Path exposing 
    ( Path
    --
    , empty
    , fromPosixString
    , toPosixString
    , fromWin32String
    , toWin32String
    --
    , filenameWithExtension
    --
    , append
    , prepend
    , join
    --
    , homeDirectory
    , currentWorkingDirectory
    , tmpDirectory
    , devNull
    )


{-| A path represents the location of a file or directory in a filesystem.

@docs Path

## Constructors

@docs empty, fromPosixString, toPosixString, fromWin32String, toWin32String

## Query

@docs filenameWithExtension

## Manipulation

@docs append, prepend, join

## Special paths

@docs homeDirectory, currentWorkingDirectory, tmpDirectory, devNull
-}


import Task exposing (Task)
import Gren.Kernel.FilePath


{-| A cross-platform representation of a filesystem path.

If `root` is empty, it means that the path is relative to the working directory.
On posix-compatible systems (Linux, Mac...), the root value is "/" if not empty.
On Windows, the root refers to the specific disk that the path applies to.

`filename` (and `extension`) refers to the last part of a path. It can still
represent a directory.

-}
type alias Path =
    { root : String
    , directory : Array String
    , filename : String
    , extension : String
    }


{-| The empty [Path](). Normally treated as the current directory.
-}
empty : Path
empty =
    { root = ""
    , directory = []
    , filename = ""
    , extension = ""
    }


{-| Build a [Path]() from a `String`. The `String` should represent a Posix-compatible path.
-}
fromPosixString : String -> Path
fromPosixString =
    Gren.Kernel.FilePath.fromPosix


{-| String representation of a [Path]() for Posix systems.
-}
toPosixString : Path -> String
toPosixString =
    Gren.Kernel.FilePath.toPosix


{-| Build a [Path]() from a `String`. The `String` should represent a Windows-compatible path.
-}
fromWin32String : String -> Path
fromWin32String =
    Gren.Kernel.FilePath.fromWin32


{-| `String` representation of a [Path]() for Windows.
-}
toWin32String : Path -> String
toWin32String =
    Gren.Kernel.FilePath.toWin32


{-| Return the filename and file extension for a [Path]().

    "/home/me/file.md"
        |> fromPosixString
        |> filenameWithExtension
        -- returns "file.md"
-}
filenameWithExtension : Path -> String
filenameWithExtension path =
    if String.isEmpty path.extension then
        path.filename

    else
        path.filename ++ "." ++ path.extension


{-| Join two paths by appending the first [Path]() onto the second.
-}
append : Path -> Path -> Path
append left right =
    prepend right left


{-| Join two paths by prepending the first [Path]() onto the second.
-}
prepend : Path -> Path -> Path
prepend left right =
    { left
        | directory =
            left.directory
                |> Array.pushLast (filenameWithExtension left)
                |> Array.append right.directory
                |> Array.filter (\dir -> dir /= "")
        , filename = right.filename
        , extension = right.extension
    }


{-| Join all paths in an `Array`.
-}
join : Array Path -> Path
join paths =
    Array.foldl append (fromPosixString ".") paths


{-| Find the [Path]() that represents the home directory of the current user.
-}
homeDirectory : Task Never Path
homeDirectory =
    Gren.Kernel.FilePath.homeDir


{-| Returns the current working directory of the program.

This is the directory that all relative paths are relative to, and is usually the
directory that the program was executed from.
-}
currentWorkingDirectory : Task x Path
currentWorkingDirectory =
    Gren.Kernel.FilePath.currentWorkingDirectory


{-| Find a [Path]() that represents a directory meant to hold temporary files.
-}
tmpDirectory : Task Never Path
tmpDirectory =
    Gren.Kernel.FilePath.tmpDir


{-| A file which is always empty. Anything written to this file will be discarded.
-}
devNull : Task Never Path
devNull =
    Gren.Kernel.FilePath.devNull
