module HttpClient exposing (..)

import Init
import Internal.Init
import Json.Encode as Json
import Json.Decode
import Task exposing (Task)
import Gren.Kernel.HttpClient


type Permission =
    Permission


initialize : Init.Task Permission
initialize =
    Task.succeed Permission
        |> Internal.Init.Task


-- REQUESTS


type Error = 
    Error String


type alias GetConfiguration a =
    { url : String
    , expect : Expect a
    }


get : Permission -> GetConfiguration a -> Task Error String
get _ config =
    Gren.Kernel.HttpClient.request
        { method = "GET"
        , url = config.url
        , bodyType = bodyTypeAsString BodyEmpty
        , body = BodyEmpty
        , expectType = expectTypeAsString config.expect
        , expect = config.expect
        }


type alias PostConfiguration a =
    { url : String
    , body : Body
    , expect : Expect a
    }


post : Permission -> PostConfiguration a -> Task Error a
post _ config =
    Gren.Kernel.HttpClient.request
        { method = "POST"
        , url = config.url
        , bodyType = bodyTypeAsString config.body
        , body = config.body
        , expectType = expectTypeAsString config.expect
        , expect = config.expect
        }


-- BODY


type Body
    = BodyEmpty
    | BodyString String


emptyBody : Body
emptyBody = BodyEmpty


stringBody : String -> Body
stringBody = BodyString


jsonBody : Json.Value -> Body
jsonBody value =
    BodyString (Json.encode 0 value)


bodyTypeAsString : Body -> String
bodyTypeAsString body =
    case body of
        BodyEmpty -> 
            "EMPTY"

        BodyString _ ->
            "STRING"


-- EXPECT


type Expect a
    = ExpectNothing
    | ExpectAnything
    | ExpectString
    | ExpectJson (Json.Decode.Decoder a)


expectNothing : Expect {}
expectNothing = ExpectNothing


expectAnything : Expect {}
expectAnything = ExpectAnything


expectString : Expect String
expectString = ExpectString


expectJson : Json.Decode.Decoder a -> Expect a
expectJson = ExpectJson


expectTypeAsString : Expect a -> String
expectTypeAsString expect =
    case expect of
        ExpectNothing ->
            "NOTHING"

        ExpectAnything ->
            "ANYTHING"

        ExpectString ->
            "STRING"

        ExpectJson _ ->
            "JSON"

