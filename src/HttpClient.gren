module HttpClient exposing (..)

import Dict exposing (Dict)
import Init
import Internal.Init
import Json.Encode as Json
import Json.Decode
import Bytes exposing (Bytes)
import Task exposing (Task)
import Gren.Kernel.HttpClient


type Permission =
    Permission


initialize : Init.Task Permission
initialize =
    Task.succeed Permission
        |> Internal.Init.Task


-- RESPONSE


type alias Response a =
    { statusCode : Int
    , statusText : String
    , headers : Dict String (Array String)
    , data : a
    }


-- ERRORS


type Error 
    = Timeout
    | BadStatus (Response String)
    | UnknownError String


errorToString : Error -> String
errorToString err =
    case err of
        Timeout ->
            "Timeout"

        BadStatus res ->
            "Bad status: " ++ String.fromInt res.statusCode

        UnknownError debugStr ->
            "Unknown error: " ++ debugStr


-- REQUESTS


get 
    : Permission 
    -> 
        { url: String
        , expect: Expect a
        } 
    -> Task Error (Response a)
get permission config =
    request permission
        { method = "GET"
        , url = config.url
        , headers = Dict.empty
        , body = BodyEmpty
        , expect = config.expect
        , timeout = Nothing
        }


post 
    : Permission 
    -> 
        { url: String
        , body: Body
        , expect: Expect a
        } 
    -> Task Error (Response a)
post permission config =
    request permission
        { method = "POST"
        , url = config.url
        , headers = Dict.empty
        , body = config.body
        , expect = config.expect
        , timeout = Nothing
        }


request 
    : Permission 
    -> 
        { method: String
        , url: String
        , headers: Dict String String
        , body: Body
        , expect: Expect a
        , timeout: Maybe Int
        }
    -> Task Error (Response a)
request _ config =
    let
        maybeContentType = 
            bodyContentType config.body
        
        updatedHeaders = 
            case maybeContentType of
                Nothing ->
                    config.headers

                Just contentType ->
                    Dict.update
                        "Content-Type"
                        (\maybeValue ->
                            case maybeValue of
                                Nothing ->
                                    Just contentType

                                Just _ ->
                                    maybeValue
                        )
                        config.headers
    in
    Gren.Kernel.HttpClient.request
        { method = config.method
        , url = config.url
        , headers = updatedHeaders
        , bodyType = bodyTypeAsString config.body
        , body = config.body
        , expectType = expectTypeAsString config.expect
        , expect = config.expect
        , timeout = Maybe.withDefault defaultTimeout config.timeout
        }


defaultTimeout : Int
defaultTimeout =
    -- 10 seconds
    10 * 1000


-- BODY


type Body
    = BodyEmpty
    | BodyString String String
    | BodyBytes String Bytes


emptyBody : Body
emptyBody = BodyEmpty


stringBody : String -> String -> Body
stringBody = BodyString


bytesBody : String -> Bytes -> Body
bytesBody = BodyBytes


jsonBody : Json.Value -> Body
jsonBody value =
    BodyString "application/json" (Json.encode 0 value)


bodyTypeAsString : Body -> String
bodyTypeAsString body =
    case body of
        BodyEmpty -> 
            "EMPTY"

        BodyString _ _ ->
            "STRING"

        BodyBytes _ _ ->
            "BYTES"


bodyContentType : Body -> Maybe String
bodyContentType body =
    case body of
        BodyEmpty ->
            Nothing

        BodyString contentType _ ->
            Just contentType

        BodyBytes contentType _ ->
            Just contentType


-- EXPECT


type Expect a
    = ExpectNothing
    | ExpectAnything
    | ExpectString
    | ExpectJson (Json.Decode.Decoder a)


expectNothing : Expect {}
expectNothing = ExpectNothing


expectAnything : Expect {}
expectAnything = ExpectAnything


expectString : Expect String
expectString = ExpectString


expectJson : Json.Decode.Decoder a -> Expect a
expectJson = ExpectJson


expectTypeAsString : Expect a -> String
expectTypeAsString expect =
    case expect of
        ExpectNothing ->
            "NOTHING"

        ExpectAnything ->
            "ANYTHING"

        ExpectString ->
            "STRING"

        ExpectJson _ ->
            "JSON"

