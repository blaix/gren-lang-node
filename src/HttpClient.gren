module HttpClient exposing (..)

import Dict exposing (Dict)
import Init
import Internal.Init
import Json.Encode as Json
import Json.Decode
import Task exposing (Task)
import Gren.Kernel.HttpClient


type Permission =
    Permission


initialize : Init.Task Permission
initialize =
    Task.succeed Permission
        |> Internal.Init.Task


-- REQUESTS


type Error = 
    Error String


type alias GetConfiguration a =
    { url : String
    , expect : Expect a
    }


get 
    : Permission 
    -> 
        { url: String
        , expect: Expect a
        } 
    -> Task Error a
get permission config =
    request permission
        { method = "GET"
        , url = config.url
        , headers = Dict.empty
        , body = BodyEmpty
        , expect = config.expect
        , timeout = defaultTimeout
        }


defaultTimeout : Maybe Int
defaultTimeout =
    -- 10 seconds
    Just 10000


post 
    : Permission 
    -> 
        { url: String
        , body: Body
        , expect: Expect a
        } 
    -> Task Error a
post permission config =
    request permission
        { method = "POST"
        , url = config.url
        , headers = Dict.empty
        , body = config.body
        , expect = config.expect
        , timeout = defaultTimeout
        }


request 
    : Permission 
    -> 
        { method: String
        , url: String
        , headers: Dict String String
        , body: Body
        , expect: Expect a
        , timeout: Maybe Int
        }
    -> Task Error a
request _ config =
    Gren.Kernel.HttpClient.request
        { method = config.method
        , url = config.url
        , headers = config.headers
        , bodyType = bodyTypeAsString config.body
        , body = config.body
        , expectType = expectTypeAsString config.expect
        , expect = config.expect
        , timeout = config.timeout
        }


-- BODY


type Body
    = BodyEmpty
    | BodyString String


emptyBody : Body
emptyBody = BodyEmpty


stringBody : String -> Body
stringBody = BodyString


jsonBody : Json.Value -> Body
jsonBody value =
    BodyString (Json.encode 0 value)


bodyTypeAsString : Body -> String
bodyTypeAsString body =
    case body of
        BodyEmpty -> 
            "EMPTY"

        BodyString _ ->
            "STRING"


-- EXPECT


type Expect a
    = ExpectNothing
    | ExpectAnything
    | ExpectString
    | ExpectJson (Json.Decode.Decoder a)


expectNothing : Expect {}
expectNothing = ExpectNothing


expectAnything : Expect {}
expectAnything = ExpectAnything


expectString : Expect String
expectString = ExpectString


expectJson : Json.Decode.Decoder a -> Expect a
expectJson = ExpectJson


expectTypeAsString : Expect a -> String
expectTypeAsString expect =
    case expect of
        ExpectNothing ->
            "NOTHING"

        ExpectAnything ->
            "ANYTHING"

        ExpectString ->
            "STRING"

        ExpectJson _ ->
            "JSON"

