effect module Terminal where { command = TerminalCmd, subscription = TerminalSub } exposing
    ( Connection
    , Configuration
    , Size
    --
    , initialize
    --
    , setStdInRawMode
    --
    , onResize
    )


import Task exposing (Task)
import Process
import Node.Program as Program
import Gren.Kernel.Terminal
import Internal.InitTask exposing (InitTask(..))


type Connection
    = Connection


type alias Configuration =
    { connection : Connection
    , colorDepth : Int
    , columns : Int
    , rows : Int
    }


type alias Size =
    { columns : Int
    , rows : Int
    }


-- INIT


initialize : Program.InitTask (Maybe Configuration)
initialize =
    Gren.Kernel.Terminal.init
        |> Task.map (\raw ->
            if raw.isTTY then
                Just
                    { connection = Connection
                    , colorDepth = raw.colorDepth
                    , columns = raw.columns
                    , rows = raw.rows
                    }

            else
                Nothing
        )
        |> InitTask


-- COMMANDS


type TerminalCmd a
    = SetStdInRawMode Bool


cmdMap : (a -> b) -> TerminalCmd a -> TerminalCmd b
cmdMap _ cmd =
    case cmd of
        SetStdInRawMode toggle ->
            SetStdInRawMode toggle


setStdInRawMode : Connection -> Bool -> Cmd a
setStdInRawMode _ toggle =
    command (SetStdInRawMode toggle)


-- SUBSCRIPTIONS


type TerminalSub msg
    = OnResize (Size -> msg)


subMap : (a -> b) -> TerminalSub a -> TerminalSub b
subMap mapFn sub =
    case sub of
        OnResize msgMap ->
            OnResize (mapFn << msgMap)


onResize : Connection -> (Size -> msg) -> Sub msg
onResize _ toMsg =
    subscription (OnResize toMsg)


-- LOOP


type alias State msg =
    { taggers : Array (Size -> msg)
    , maybeProcessId : Maybe Process.Id
    }


init : Task Never (State msg)
init =
    Task.succeed
        { taggers = []
        , maybeProcessId = Nothing
        }


onEffects
    : Platform.Router msg Event
    -> Array (TerminalCmd msg)
    -> Array (TerminalSub msg)
    -> State msg
    -> Task Never (State msg)
onEffects router commands subs state =
    let
        newTaggers =
            Array.foldl extractTagger [] subs

        extractTagger (OnResize tagger) acc =
            Array.pushLast tagger acc

        subscriptionTask =
            if Array.length newTaggers > 0 then
                case state.maybeProcessId of
                    Just pid ->
                        Task.succeed <| Just pid

                    Nothing ->
                        Gren.Kernel.Terminal.attachListener (\data -> Platform.sendToSelf router (SelfOnResize data))
                            |> Process.spawn
                            |> Task.map Just


            else
                case state.maybeProcessId of
                    Just pid ->
                        Process.kill pid
                            |> Task.map (\_ -> Nothing)

                    Nothing ->
                        Task.succeed Nothing

        commandTasks =
            Array.foldl
                (\(SetStdInRawMode toggle) tasks ->
                    Task.andThen (\_ -> Platform.sendToSelf router (SelfToggleStdInRawMode toggle)) tasks
                )
                (Task.succeed Unit)
                commands
    in
        commandTasks
            |> Task.andThen (\_ -> subscriptionTask)
            |> Task.andThen (\maybeProcessId ->
                Task.succeed
                    { taggers = newTaggers
                    , maybeProcessId = maybeProcessId
                    }
                )


type Event
    = SelfToggleStdInRawMode Bool
    | SelfOnResize Size


onSelfMsg : Platform.Router msg Event -> Event -> State msg -> Task Never (State msg)
onSelfMsg router event state =
    case event of
        SelfToggleStdInRawMode toggle ->
            let
                _ =
                    Gren.Kernel.Terminal.setStdInRawMode toggle
            in
                Task.succeed state

        SelfOnResize newSize ->
            state.taggers
                |> Array.map (\tagger -> tagger newSize)
                |> Array.foldl
                    (\msg tasks ->
                        Task.andThen (\Unit -> Platform.sendToApp router msg) tasks
                    )
                    (Task.succeed Unit)
                |> Task.andThen (\_ -> Task.succeed state)
