effect module Stream where { subscription = StreamSub } exposing
    ( Stream
    , send
    , sendString
    , sendLine
    , listen
    )

{-| A `Stream` is an abstract flow of data from one point to another,
like bytes flowing from a server to a client, or from a file to a program.

@docs Stream, send, sendString, sendLine, listen

-}

import Dict exposing (Dict)
import Gren.Kernel.Stream
import Task exposing (Task)
import Bytes.Encode as BE
import Bytes exposing (Bytes)
import Process
import Internal.Stream as Internal


{-| A specific stream.
-}
type alias Stream
    = Internal.Stream


{-| This lets you send bytes over a `Stream`.
-}
send : Stream -> Bytes -> Task x {}
send (Internal.Stream _ kernelStream) bytes =
    Gren.Kernel.Stream.send kernelStream bytes


{-| This lets you send a string over a `Stream`.
-}
sendString : Stream -> String -> Task x {}
sendString stream string =
    send stream <|
        BE.encode <|
            BE.string string


{-| This sends string and a newline over a `Stream`.
-}
sendLine : Stream -> String -> Task x {}
sendLine stream string =
    sendString stream <| string ++ "\n"


-- SUBSCRIPTION


type StreamSub msg
    = Listen Stream (Bytes -> msg)


subMap : (a -> b) -> StreamSub a -> StreamSub b
subMap mapFn sub =
    case sub of
        Listen stream msgMap ->
            Listen stream (mapFn << msgMap)


{-| This notifies your application every time bytes have arrived over the `Stream`.
-}
listen : Stream -> (Bytes -> msg) -> Sub msg
listen stream msgMap =
    subscription (Listen stream msgMap)


-- LOOP


type alias State msg =
    { taggers : Dict Int (Tagger msg)
    , processes : Dict Int Process.Id
    }


type alias Tagger msg =
    { stream : Stream
    , taggers : Array (Bytes -> msg)
    }


init : Task.Task Never (State msg)
init =
    Task.succeed
        { taggers = Dict.empty
        , processes = Dict.empty
        }


onEffects
    : Platform.Router msg Event
    -> Array (StreamSub msg)
    -> State msg
    -> Task.Task Never (State msg)
onEffects router subs state =
    let
        newTaggers =
            Array.foldl subToListener Dict.empty subs

        toSpawn =
            Dict.diff newTaggers state.taggers
                |> Dict.values
                |> Array.map .stream

        existingProcesses =
            Dict.filter (\sid _ -> Dict.member sid newTaggers) state.processes

        killTasks =
            Dict.diff state.processes newTaggers
                |> Dict.values
                |> Array.foldl
                    (\id tasks -> Task.andThen (\{} -> Process.kill id) tasks)
                    (Task.succeed {})
    in
    killTasks
        |> Task.andThen (\_ -> spawnHelp router toSpawn existingProcesses)
        |> Task.map (\newProcesses ->
            { taggers = newTaggers
            , processes = newProcesses
            }
        )


subToListener : StreamSub msg -> Dict Int (Tagger msg) -> Dict Int (Tagger msg)
subToListener sub taggers =
    case sub of
        Listen ((Internal.Stream sid _) as stream) tagger ->
            case Dict.get sid taggers of
                Just data ->
                    Dict.insert sid
                        { data | taggers = Array.pushLast tagger data.taggers }
                        taggers

                Nothing ->
                    Dict.insert sid
                        { stream = stream
                        , taggers = [ tagger ]
                        }
                        taggers


spawnHelp : Platform.Router msg Event -> Array Stream -> Dict Int Process.Id -> Task.Task Never (Dict Int Process.Id)
spawnHelp router toSpawn processes =
  case Array.first toSpawn of
    Nothing ->
      Task.succeed processes

    Just ((Internal.Stream sid rawStream) as nextStream) ->
      let
        spawnStream =
          Process.spawn <|
            attachListener rawStream (\data ->
                Platform.sendToSelf router (FromStream nextStream data)
            )

        rest =
          Array.dropFirst 1 toSpawn

        spawnRest processId =
          spawnHelp router rest (Dict.insert sid processId processes)
      in
        spawnStream
          |> Task.andThen spawnRest


attachListener : Internal.RawStream -> (Bytes -> Task.Task Never {}) -> Task.Task x Never
attachListener =
  Gren.Kernel.Stream.attachListener


type Event
    = FromStream Stream Bytes


onSelfMsg : Platform.Router msg Event -> Event -> State msg -> Task.Task Never (State msg)
onSelfMsg router event state =
    case event of
        FromStream (Internal.Stream sid _) data ->
            Dict.get sid state.taggers
                |> Maybe.map .taggers
                |> Maybe.withDefault []
                |> Array.map (\tagger -> tagger data)
                |> Array.foldl
                    (\msg tasks ->
                        Task.andThen (\{} -> Platform.sendToApp router msg) tasks
                    )
                    (Task.succeed {})
                |> Task.map (\_ -> state)
