module Main exposing (main)

import Node
import Init
import Task
import HttpClient
import Stream exposing (Stream)
import Json.Encode as Json
import Json.Decode


type alias Model =
    { stdout : Stream 
    , httpPermission : HttpClient.Permission
    }


type Msg 
    = Response (Result HttpClient.Error String)
    | JsonResponse (Result HttpClient.Error { response : String })


main : Node.Program Model Msg
main =
    Node.defineProgram
        { init = init
        , update = update
        , subscriptions = \_ -> Sub.none
        }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.await HttpClient.initialize <| \httpPerm ->
        Node.startProgram
            { model = 
                { stdout = env.stdout
                , httpPermission = httpPerm
                }
            , command =
                case Array.get 2 env.args of
                    Just "simple get" ->
                        HttpClient.get httpPerm 
                            { url ="http://localhost:8080/mocked-path"
                            }
                            |> Task.attempt Response

                    Just "post with body" ->
                        HttpClient.post httpPerm 
                            { url ="http://localhost:8080/mocked-path"
                            , body = HttpClient.jsonBody <|
                                Json.object
                                    [ { key = "secret", value = Json.string "Hello, POST!" }]
                            , expect = HttpClient.expectJson
                                (Json.Decode.map (\s -> { response = s })
                                    (Json.Decode.field "response" Json.Decode.string)
                                )
                            }
                            |> Task.attempt JsonResponse

                    _ ->
                        Stream.sendLine env.stdout"Invalid start argument"
            }


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        Response (Ok data) ->
            { model = model
            , command = Stream.sendLine model.stdout ("200: " ++ data)
            }

        Response (Err (HttpClient.Error errorMsg)) ->
            { model = model
            , command = Stream.sendLine model.stdout errorMsg
            }
        
        JsonResponse (Ok data) ->
            { model = model
            , command = Stream.sendLine model.stdout ("200: " ++ data.response)
            }

        JsonResponse (Err (HttpClient.Error errorMsg)) ->
            { model = model
            , command = Stream.sendLine model.stdout errorMsg
            }
            
