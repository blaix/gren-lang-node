module Main exposing (main)

import Node
import Bytes exposing (Bytes)
import Bytes.Decode as Decode
import Dict
import Stream exposing (Stream)
import Node exposing (Environment, Program)
import HttpServer as Http exposing (ServerError(..), Method(..))
import HttpServer.Response as Response exposing (Response)
import Init
import Task


main : Program Model Msg
main =
    Node.defineProgram
        { init = init
        , update = update
        , subscriptions = subscriptions
        }


type alias Model =
    { stdout : Stream
    , stderr : Stream
    , server : Maybe Http.Server
    }


type Msg
    = CreateServerResult (Result Http.ServerError Http.Server)
    | GotRequest Http.Request Response


init : Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.await Http.initialize <| \serverPermission ->
        Node.startProgram
            { model =
                { stdout = env.stdout
                , stderr = env.stderr
                , server = Nothing
                }
            , command =
                Task.attempt CreateServerResult <|
                    Http.createServer serverPermission
                        { host = "0.0.0.0"
                        , port_ = 3000
                        }
            }


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        CreateServerResult result ->
            case result of
                Ok server ->
                    { model = { model | server = Just server }
                    , command = Stream.sendLine model.stdout
                        "Server started"
                    }
                Err (ServerError code message) ->
                    { model = model
                    , command = Stream.sendLine model.stderr <|
                        "Server failed to start: " ++ code ++ "\n" ++ message
                    }
        
        GotRequest req res ->
            let
                { body, status } = case { method = req.method, path = req.url.path } of
                    { method = GET, path = "/" } ->
                        { body = "Welcome!"
                        , status = 200
                        }

                    { method = GET, path = "/hello" } ->
                        { body = "Hello to you too!"
                        , status = 200
                        }
                    
                    { method = POST } ->
                        let
                            -- TODO: add `Request.bodyAsString` and `Request.bodyFromJson <decoder>` helpers
                            bodyStr = 
                                req.body
                                    |> Decode.decode (Decode.string <| Bytes.width req.body)
                                    |> Maybe.withDefault "Oops! Can't decode body."
                        in
                        { body = "You posted: " ++ bodyStr
                        , status = 200
                        }
                    
                    _ ->
                        { body = "Not found: " ++ (Http.requestInfo req)
                        , status = 404
                        }
            in
            { model = model
            , command =
                res
                    |> Response.setStatus status
                    |> Response.setHeader "Content-type" "text/html"
                    |> Response.setHeader "X-Custom-Header" "hey there"
                    |> Response.setBody ("<html>" ++ body ++ "</html>")
                    |> Http.respond
            }


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.server of
        Just server ->
            Http.onRequest server GotRequest

        Nothing ->
            Sub.none
