module Test.FileSystemPath exposing (tests)

import FileSystem.Path as Path
import Test exposing (Test, describe, test)
import Expect


tests : Test
tests =
    describe "FileSystem.Path Tests"
        [ describe "fromPosixString"
            [ test "absolute file" <| 
                \{} ->
                    Path.fromPosixString "/some/long/path.js"
                        |> Expect.equal
                            { root = "/"
                            , directory = [ "some", "long" ]
                            , filename = "path"
                            , extension = "js"
                            }
            , test "absolute file without extension" <| 
                \{} ->
                    Path.fromPosixString "/some/long"
                        |> Expect.equal
                            { root = "/"
                            , directory = [ "some" ]
                            , filename = "long"
                            , extension = ""
                            }
            , test "relative file" <| 
                \{} ->
                    Path.fromPosixString "some/other/file"
                        |> Expect.equal
                            { root = ""
                            , directory = [ "some", "other" ]
                            , filename = "file"
                            , extension = ""
                            }
            , test "just a file name" <|
                \{} ->
                    Path.fromPosixString "file.md"
                        |> Expect.equal
                            { root = ""
                            , directory = []
                            , filename = "file"
                            , extension = "md"
                            }
            , test "paths are normalized" <| 
                \{} ->
                    Path.fromPosixString "some/other/file/."
                        |> Expect.equal
                            { root = ""
                            , directory = [ "some", "other" ]
                            , filename = "file"
                            , extension = ""
                            }
            , test "paths are normalized, even in extreme cases" <| 
                \{} ->
                    Path.fromPosixString "some/other//file/other/.."
                        |> Expect.equal
                            { root = ""
                            , directory = [ "some", "other" ]
                            , filename = "file"
                            , extension = ""
                            }
            ]
        , describe "fromWin32String"
            [ test "absolute file" <| 
                \{} ->
                    Path.fromWin32String "C:\\some\\long\\path.js"
                        |> Expect.equal
                            { root = "C:\\"
                            , directory = [ "some", "long" ]
                            , filename = "path"
                            , extension = "js"
                            }
            ]
        , describe "to*String"
            [ test "toPosixString is the inverse of fromPosixString" <|
                \{} ->
                    let
                        pathStr =
                            "/some/specific/file.md"

                        path =
                            Path.fromPosixString pathStr
                    in
                    Expect.equal pathStr (Path.toPosixString path)
            , test "toPosixString works on simple file name" <|
                \{} ->
                    let
                        pathStr =
                            "file.md"

                        path =
                            Path.fromPosixString pathStr
                    in
                    Expect.equal pathStr (Path.toPosixString path)
            , test "toWin32String is the inverse of fromWin32String" <|
                \{} ->
                    let
                        pathStr =
                            "C:\\some\\specific\\file.md"

                        path =
                            Path.fromWin32String pathStr
                    in
                    Expect.equal pathStr (Path.toWin32String path)
            , test "Path is platform agnostic" <|
                \{} ->
                    let
                        pathStr =
                            "C:\\some\\specific\\file.md"

                        path =
                            Path.fromWin32String pathStr
                    in
                    Expect.equal "/some/specific/file.md" (Path.toPosixString path)
            ]
        ]
